if (args.length <= 0) return message.reply("Lütfen bu şekilde kullanınız! `!staj <ad> <role> <age>`");

        let portfolioArgs = [];

        function imagePortfolio() {
        }
        
        function linkPortfolio() {
        }

        if (args[3] === "resim") imagePortfolio();
        if (args[3] === "link") linkPortfolio();

        args.forEach((e, i) => {
            if (i >= 4) {
                portfolioArgs.push(e.toString());
            }
        });

        let portfolioBuffers = [];

        for (let i = 0; i < portfolioArgs.length; i++) {

            const res = await fetch(portfolioArgs[i]);
            const arrayBuffer = await res.arrayBuffer();
            const buffer = Buffer.from(arrayBuffer);

            portfolioBuffers.push(buffer);
        }

        let portfolioArgsWithChunks = arrayIntoChunks(portfolioBuffers, 3);

        var portfolioMergedImagesNames = [];

        for (let j = 0; j < portfolioArgsWithChunks.length; j++) {
            await combineImages(portfolioArgsWithChunks[j]).then(img => {
                img.write('portfolio'+j+'.png');
                portfolioMergedImagesNames.push('portfolio'+j+'.png');
            })
        }

        let attachments = [];

        portfolioMergedImagesNames.forEach(file => {
            const attachment = new MessageAttachment("./" + file);
            attachments.push(attachment);
        });

        let isPortfolioImage = false;
        let portfolioLinks = [];

        if (args[3] === "resim") isPortfolioImage = true;
        if (!isPortfolioImage) {
            portfolioLinks = portfolioArgs;
        }

        message.channel.send({
            content: template(args[0], args[1], args[2], portfolioLinks),
            files: isPortfolioImage ? attachments : [] 
        }).then(msg => {
            msg.react("✅");
            msg.react("❌");
        });
        message.channel.send("** **");

        message.delete();